package methodAssignment.pkg;

/*
 Q1.Given an array arr[] of integers. Find a peak element i.e. an element that is not smaller than its neighbors.

 Note: For corner elements, we need to consider only one neighbor.

  Example:
 Input: array[]= {5, 10, 20, 15}
 Output: 20
  
 */

public class Question01 {
	
	void peak()
	{
		int a[] = {5,10,20,15};
		int pe = 0;
		for (int i=1;i<a.length;i++)
		{
			if (pe<a[i])
			{
				pe = a[i];
			}
		}
		
		System.out.print("Peak Elements is in array : "+pe);
		
	}
	
	public static void main(String[] args) {
		
		Question01 ue = new Question01();
		ue.peak();
		
	}

}



Output is : Peak Elements is in array : 20


=====================================================================================


package methodAssignment.pkg;
/*
  Q2.Given an array and a number K where K is smaller than the size of the array.
  Find the K’th smallest element in the given array. Given that all array elements are distinct.

Examples:  

Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 3
Output: 7

  */
public class Question02 {
	
	void kElement()
	{
		int arr[] = {7, 10, 4, 3, 20, 15};
		int k = 3;
		
		for (int i=0;i<arr.length;i++)
		{
			for (int j=i+1;j<arr.length;j++)
			{
			if (arr[i] >arr[j])
			{
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			}
		}
		
		for (int j=0;j<arr.length;j++)
		{
			if (j == k)
			{
				System.out.println("K’th smallest element "+arr[j]);
			}
		}
	}
	
	public static void main(String[] args) {
		Question02 qu = new Question02();
		qu.kElement();
	}

}


Output is :  K’th smallest element 10.


=======================================================================================

package methodAssignment.pkg;

/* 
 
 Q3.Given a sorted array arr[] and a number x, write a function that counts the occurrences of x in arr[].
  Examples:
  Input: arr[] = {1, 1, 2, 2, 2, 2, 3,},   x = 2
  Output: 4 // x (or 2) occurs 4 times in arr[]
  
 */

public class Question03 {
	
	void counts()
	{
		int arr[] =  {1, 1, 2, 2, 2, 2, 3,};
		int x = 2;
		int count = 0;
		
		for (int i=0;i<arr.length;i++)
		{
			if (x == arr[i])
			{
				count++;
			}
		}
		
		System.out.println("counts the occurrences of x ="+count);
	}
	
	
	public static void main(String[] args) {
		Question03 qu = new Question03();
		qu.counts();
	}
}


Output is : counts the occurrences of x =4.

===========================================================================================
package methodAssignment.pkg;

/*
 Q4.Given an array A[] consisting of only 0s, 1s, and 2s. The task is to write a function that sorts the given array.
   The functions should put all 0s first, then all 1s and all 2s in last.
  
 */
public class Question04 {

	void zeroOnePut()
	{
		int arr[] ={0, 1, 2, 1, 0, 1, 2, 1, 0};
		
		for (int i=0;i<arr.length;i++)
		{
			for (int j=i+1;j<arr.length;j++)
			{
				if (arr[i] > arr[j])
				{
					int temp = arr[i];	
					arr[i] = arr[j];
					arr[j] = temp;	
				}
			}
		}
		
		System.out.println("Sorted Array is:");
		for (int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}

	}
	public static void main(String[] args) {
		Question04 qu = new Question04();
		qu.zeroOnePut();
	}

}



Output is :

Sorted Array is:
0 0 0 1 1 1 1 2 2 

===========================================================================================

package methodAssignment.pkg;
/*
 Q5.Given two sorted arrays, find their union and intersection.
Example:

 Input: arr1[] = {1, 3, 4, 5, 7}
        arr2[] = {2, 3, 5, 6}
 Output: Union : {1, 2, 3, 4, 5, 6, 7}
         Intersection : {3, 5}
 */
public class Question05 {
	
	void unionIntersection()
	{
		int arr1[] = {1, 3, 4, 5, 7};
		int arr2[] = {2, 3, 5, 6};
		int arr3[] = new int[arr1.length+arr2.length];
		int x = 0;
		
		for (int i=0;i<arr1.length;i++)
		{
			arr3[x++] = arr1[i];
		}
		
		for (int i=0;i<arr2.length;i++)
		{
			arr3[x++] = arr2[i];
		}
		
		System.out.println("Intersection is :");
		for (int i=0;i<arr3.length;i++)
		{
			for (int j=i+1;j<arr3.length;j++)
			{
				if (arr3[i] == arr3[j] && arr3[i] != -1)
				{
					System.out.print(arr3[i]+" ");
					arr3[j] = -1;
				}
			}
		}
		
		System.out.println("Union array is:");
		for (int i=0;i<arr1.length;i++)
		{
			System.out.print(arr3[i]+" ");
		}
		
	}
	
	public static void main(String[] args) {
		Question05 qu = new Question05();
		qu.unionIntersection();
	}

}


Output is :

Intersection is :
3 5 Union array is:
1 3 4 5 7 


===========================================================================================

package methodAssignment.pkg;

/*
 Q6.Given an array, cyclically rotate the array clockwise by one.

Examples:  

Input:  arr[] = {1, 2, 3, 4, 5}
Output: arr[] = {5, 1, 2, 3, 4}
 */

public class Question06 {
	
	void rotation()
	{
		int arr[] = {1, 2, 3, 4, 5};
		
		
		int temp = arr[arr.length-1];
		for (int i=arr.length-1;i>0;i--)
		{
			int dtemp = arr[i];
			arr[i] = arr[i-1];
			arr[i-1] = dtemp;
		}
		arr[0]= temp ;
		
		System.out.println("Output array is :");
		for (int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
		
	
	public static void main(String[] args) {
		Question06 qu = new Question06();
		qu.rotation();
	}

}


Output is : Output array is :
	    5 1 2 3 4 

===========================================================================================

package methodAssignment.pkg;
/*
Q8.Given three arrays sorted in non-decreasing order, print all common elements in these arrays.

Examples:

 Input:
ar1[] = {1, 5, 10, 20, 40, 80}
ar2[] = {6, 7, 20, 80, 100}
ar3[] = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20, 80
*/
public class Question08 {
	
	void sameEle()
	{
		int ar1[] = {1, 5, 10, 20, 40, 80};
		int ar2[] = {6, 7, 20, 80, 100};
		int ar3[] = {3, 4, 15, 20, 30, 70, 80, 120};
		
		System.out.println("same elements in 3 array :");
		for (int i=0;i<ar1.length;i++)
		{
			for (int j=0;j<ar2.length;j++)
			{
				for (int k=0;k<ar3.length;k++)
				{
					if ((ar1[i] == ar2[j]) && (ar3[k] == ar2[j] ))
					{
						System.out.print(ar1[i]+" ");
					}
				}
			}
		}
	}
	public static void main(String[] args) {
		Question08 qu = new Question08();
		qu.sameEle();
	}
	

}


output is :

same elements in 3 array :
20 80 


==========================================================================================

 package methodAssignment.pkg;
/*
Q9.Given an array of integers arr[], The task is to find the index of first repeating element in it i.e.
  the element that occurs more than once and whose index of the first occurrence is the smallest.

Examples:

  Input: arr[] = {10, 5, 3, 4, 3, 5, 6}
  Output: 5
*/
public class Question09 {
	
	void repeatingEle()
	{
		int arr[] = {10, 5, 3, 4, 3, 5, 6};
		
		for (int i=0;i<arr.length;i++)
		{
			int count=1;
			for (int j=i+1;j<arr.length;j++)
			{
				if (arr[i] == arr[j])
				{
					System.out.print("Repeating first element is :"+j);
					count++;
				}
			}
			if (count>1)
			{
				break;
			}
		}

	}
	
	public static void main(String[] args) {
		Question09 qu = new Question09();
		qu.repeatingEle();
	}

}


Output is :      Repeating first element is :5



==========================================================================================

package methodAssignment.pkg;
/*
 Q10.Given the heights of N towers and a value of K, Either increase or decrease the height of every tower by K (only once) where K > 0. After modifications,
   the task is to minimize the difference between the heights of the longest and the shortest tower and output its difference.

 Examples:

  Input: arr[] = {1, 15, 10}, k = 6
   Output:  Minimum difference is 5.
  Explanation: Change 1 to 7, 15 to 9 and 10 to 4. Maximum difference is 5 (between 4 and 9). We can’t get a lower difference.
*/

public class Question10 {
	void tower()
	{
		int arr[] = {1, 15, 10};
		int k = 6;
		
		for (int i=0;i<arr.length;i++)
		{
			if (arr[i] > k)
			{
				arr[i] = arr[i] -6;	
			}
			else 
			{	
				arr[i] = arr[i] + 6;
			}
		}
		
		for (int i=0;i<arr.length;i++)
		{
			for (int j=i+1;j<arr.length;j++)
			{
				if (arr[i]>arr[j])
				{
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		
		for (int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
		
		System.out.println("Minimum difference is:"+(arr[arr.length-1]-arr[0]));
		
	}
	
	public static void main(String[] args) {
		Question10 qu = new  Question10();
		qu.tower();
	}

}


Output is :

4 7 9 Minimum difference is:5


===========================================================================================
package methodAssignment.pkg;
/*
Q12.Find the majority element in the array. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).

  Examples :

  Input : {3, 3, 4, 2, 4, 4, 2, 4, 4}
  Output : 4
*/

public class Question12 {
	void majority()
	{
		int arr[] = {3, 3, 4, 2, 4, 4, 2, 4, 4};
		
		
		for (int i=0;i<arr.length;i++)
		{
			int count = 1;
			for (int j=i+1;j<arr.length;j++)
			{
				if (arr[i] == arr[j] )
				{
					arr[j] = -1;
					count++;
				}
				
			}
			if (arr.length/2 < count && arr[i] != -1)
			{
				System.out.println("Output is :"+arr[i]+" ");
			}
		}
		
		
	}
	
	public static void main(String[] args) {
		Question12 qu = new Question12();
		qu.majority();
	}

}

output is :    Output is :4 



===========================================================================================


package methodAssignment.pkg;

/*
Q13. Given two sorted arrays A and B of size p and q, write a Java program to merge elements of A with B by maintaining the sorted order i.e.
 fill A with first p smallest elements and fill B with remaining elements.
 Example:
 Input :
 int[] A = { 1, 5, 6, 7, 8, 10 }
 int[] B = { 2, 4, 9 }
 Output:
 Sorted Arrays:
 A: [1, 2, 4, 5, 6, 7]
 B: [8, 9, 10]
*/

public class Question13 {
	void mergeEle()
	{
		int a[] = { 1, 5, 6, 7, 8, 10 };
		int b[] = { 2, 4, 9 };
		
		int c[] = new int[a.length+b.length];
		
		for (int i=0;i<a.length;i++)
		{
			c[i] = a[i];
		}
		
		for (int i=0;i<b.length;i++)
		{
			c[a.length+i] = b[i];
		}


		for (int i=0;i<c.length;i++)
		{
			for (int j=i+1;j<c.length;j++)
			{
				if (c[i]>c[j])
				{
					int temp = c[i];
					c[i] = c[j];
					c[j] = temp;
				}
			}
		}
		
		System.out.println("\nArray A is:");
		for (int i=0;i<a.length;i++)
		{
			a[i]=c[i];
			System.out.print(a[i]+" ");
			
		}
		
		System.out.println("\nArray B is :");
		for (int i=0;i<b.length;i++)
		{
			b[i]=c[a.length+i];
			System.out.print(b[i]+" ");
		}
	}

	public static void main(String[] args) {
		Question13 qu = new Question13();
		qu.mergeEle();
	}
}



Output is :


Array A is:
1 2 4 5 6 7 
Array B is :
8 9 10 


===========================================================================================
package methodAssignment.pkg;

/*
 Q14.Write a Java program to find maximum product of two integers in a given array of integers.

 Example:
 Input :
 nums = { 2, 3, 5, 7, -7, 5, 8, -5 }
 Output:
 Pair is (7, 8), Maximum Product: 56
*/

public class Question14 {
	
	void maxproduct()
	{
		int arr[] = { 2, 3, 5, 7, -7, 5, 8, -5 };
		
		for (int i = 0;i<arr.length;i++)
		{
			for (int j=i+1;j<arr.length;j++)
			{
				if (arr[i] <arr[j])
				{
					int temp  = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		
		System.out.println("Maxmum product is:"+(arr[0]*arr[1]));
	}
	
	public static void main(String[] args) {
		Question14 qu = new Question14();
		qu.maxproduct();
	}

}


output is : Maxmum product is:56

===========================================================================================








